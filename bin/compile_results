#!/usr/bin/env python3

import pathlib
import shutil
import subprocess

import numpy as np

import argparse


def load_data(path):
    return np.loadtxt(str(path), delimiter='\t', skiprows=1)


def rmdir_if_exists(path):
    if path.exists():
        shutil.rmtree(path)


def list_all_directory_with(rootdir, filename):
    directories = []
    for f in rootdir.iterdir():
        if f.is_file():
            if f.name in filename:
                directories.append(f.parent)
        if f.is_dir():
            directories.extend(list_all_directory_with(f, filename))
    return directories


def create_result_plot(eval_result_file, outdir):
    subprocess.Popen(['plot_result', '--tsvpath',
                      eval_result_file, '--outdir', outdir])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('--outdir',
                        type=str,
                        required=True,
                        help='output directory')
    parser.add_argument('--eval-filename',
                        type=str,
                        default="evaluation_result_scalar.tsv",
                        help='eval result filename')
    parser.add_argument('--snapshot-dir-prefix',
                        type=str,
                        default="iteration-",
                        help='snapshot directory prefix')

    args = parser.parse_args()

    rootdir = cwd = pathlib.Path.cwd()
    directories = list_all_directory_with(rootdir, args.eval_filename)

    for directory in directories:
        if args.outdir in str(directory):
            continue
        print('directory: ', directory)
        eval_result_file = directory / pathlib.Path(args.eval_filename)
        results = load_data(eval_result_file)

        best_mean_iteration = int(results[np.argmax(results[:, 1]), 0])
        best_median_iteration = int(results[np.argmax(results[:, 5]), 0])

        outdir = pathlib.Path(args.outdir) / pathlib.Path(directory.name)
        rmdir_if_exists(outdir)
        outdir.mkdir()

        best_mean_dir = directory / \
            (args.snapshot_dir_prefix + str(best_mean_iteration))
        best_median_dir = directory / \
            (args.snapshot_dir_prefix + str(best_median_iteration))

        out_mean_dir = outdir / 'best_mean'
        out_median_dir = outdir / 'best_median'

        rmdir_if_exists(out_mean_dir)
        rmdir_if_exists(out_median_dir)

        shutil.copy(eval_result_file, outdir)
        shutil.copytree(best_mean_dir, out_mean_dir)
        shutil.copytree(best_median_dir, out_median_dir)

        create_result_plot(outdir / eval_result_file.name, outdir)
